    ╔════════════════════════════════════════════════════════════════════════════╗
    ║                 AI INSTRUCTIONS: CREATE BLOG POST/PROJECT                  ║
    ║                    For TUI Portfolio Website                               ║
    ╚════════════════════════════════════════════════════════════════════════════╝

    ================================================================================
    OVERVIEW
    ================================================================================

    This website displays projects/blog posts in a TUI (Terminal User Interface) 
    style. Each post is a markdown file that gets parsed and rendered with special
    TUI styling (colored text, box borders, etc.).

    ================================================================================
    STEP 1: CREATE THE MARKDOWN FILE
    ================================================================================

    Location: /projects/your-post-name.md

    Required Frontmatter (YAML at top):
    ---
    title: Your Project Title Here
    date: 2024-10-20
    tags: [tag1, tag2, tag3]
    github: https://github.com/username/repo (optional)
    demo: https://demo-link.com (optional)
    ---

    Full Example Structure:
    ---
    title: My Awesome Project
    date: 2024-10-20
    tags: [web, javascript, react]
    github: https://github.com/username/awesome-project
    demo: https://awesome-project.vercel.app
    ---

    # My Awesome Project

    ## Overview
    Brief description of your project. Explain what it does, why you built it, 
    and what problem it solves.

    ## Features
    - **Feature 1**: Description of the first key feature
    - **Feature 2**: Description of the second key feature  
    - **Feature 3**: Description of the third key feature

    ## Technical Stack
    - **Frontend**: React, TypeScript, Tailwind CSS
    - **Backend**: Node.js, Express, PostgreSQL
    - **Deployment**: Vercel, Railway

    ## Code Example
    ```javascript
    function example() {
        console.log("This will appear in a green bordered box!");
    }
    ```

    ## Challenges & Solutions
    Discuss interesting technical challenges you faced and how you solved them.

    ## Results
    Share metrics, outcomes, or what you learned.

    ## Links
    - [Live Demo](https://demo-link.com)
    - [GitHub Repository](https://github.com/username/repo)
    - [Documentation](https://docs.example.com)

    ---

    *Built in [Month Year] • [Additional info]*


    ================================================================================
    STEP 2: AUTO-GENERATE projects.json (AUTOMATIC!)
    ================================================================================

    **GOOD NEWS**: You don't need to manually edit projects.json anymore!

    The website now has an auto-discovery system that scans the /projects/ folder
    and automatically generates projects.json from all markdown files.

    After creating your markdown file, simply run:

    ./build.sh

    Or manually:

    node build-projects.js

    This will:
    ✓ Scan all .md files in /projects/ folder
    ✓ Extract frontmatter (title, date, tags, github, demo)
    ✓ Auto-generate projects.json with all projects
    ✓ Sort projects by date (newest first)

    The script automatically:
    - Creates a unique ID from the filename
    - Extracts all frontmatter fields
    - Ignores files without proper frontmatter
    - Sorts projects by date
    - Validates the structure

    **You only need to create the markdown file with proper frontmatter!**
    The rest happens automatically when you run the build command.

    ================================================================================
    STEP 3: SUPPORTED MARKDOWN FEATURES
    ================================================================================

    The TUI parser supports these markdown features:

    ✓ Headers (H1-H6)
    # H1 Header
    ## H2 Header
    ### H3 Header

    ✓ Bold Text
    **This is bold**

    ✓ Italic Text
    *This is italic*

    ✓ Inline Code
    Use `code` for inline code

    ✓ Code Blocks with Language
    ```javascript
    const example = "code";
    ```

    ✓ Links (clickable!)
    [Link Text](https://example.com)
    Appears as: Link Text →

    ✓ Images
    ![Alt Text](image-url.jpg)
    Appears as: [IMG: Alt Text]

    ✓ Unordered Lists
    - Item 1
    - Item 2
    - Item 3

    ✓ Ordered Lists
    1. First item
    2. Second item
    3. Third item

    ✓ Blockquotes
    > This is a quote
    > Multiple lines work too

    ✓ Horizontal Rules
    ---
    or
    ***

    ✓ Tables
    | Column 1 | Column 2 | Column 3 |
    |----------|----------|----------|
    | Data 1   | Data 2   | Data 3   |

    ================================================================================
    STEP 4: TUI STYLING COLORS
    ================================================================================

    When rendered, your content will appear with these colors:

    • Headers: Cyan borders with bright white text
    • Bold text: Bright white
    • Italic text: Yellow
    • Inline code: Green
    • Code blocks: Green text in green bordered boxes
    • Links: Cyan with → arrow (clickable!)
    • Blockquotes: Magenta left border
    • List bullets: Cyan •
    • Tables: Box-drawing borders

    ================================================================================
    STEP 5: BEST PRACTICES
    ================================================================================

    DO:
    ✓ Use descriptive titles (appears in navigation)
    ✓ Include a clear Overview section
    ✓ Break long paragraphs into readable chunks
    ✓ Use code blocks for technical examples
    ✓ Add links to live demos and GitHub repos
    ✓ Use lists for features and technical stacks
    ✓ Include dates in YYYY-MM-DD format
    ✓ Choose relevant tags (3-5 tags max)

    DON'T:
    ✗ Use extremely long lines (max ~78 chars for best display)
    ✗ Forget to update projects.json after creating the .md file
    ✗ Use duplicate IDs in projects.json
    ✗ Include images as base64 (use URLs instead)
    ✗ Use HTML tags (stick to markdown)
    ✗ Forget the frontmatter YAML section

    ================================================================================
    STEP 6: BUILD & TEST YOUR POST
    ================================================================================

    1. Create the markdown file in /projects/
    2. Run the build command: ./build.sh (or: node build-projects.js)
    3. Start server: python3 -m http.server 8000
    4. Open browser: http://localhost:8000
    5. Navigate to Projects section (sidebar)
    6. Click on your new project
    7. Verify:
    - Content displays correctly
    - Links are clickable (cyan with →)
    - Code blocks appear in green boxes
    - Scrolling works smoothly
    - All formatting looks correct

    **Note**: If server is already running, just run ./build.sh and refresh browser!

    ================================================================================
    STEP 7: VALIDATION CHECKLIST
    ================================================================================

    Before considering the blog post complete:

    File Structure:
    □ Markdown file exists in /projects/ folder
    □ Filename uses lowercase and hyphens (no spaces)
    □ File has .md extension

    Frontmatter:
    □ YAML frontmatter is properly formatted with --- delimiters
    □ Title is descriptive and clear
    □ Date is in YYYY-MM-DD format
    □ Tags are in array format [tag1, tag2, tag3]
    □ GitHub/demo links are valid URLs (if included)

    Content:
    □ Has clear Overview section
    □ Uses proper markdown formatting
    □ Links use [text](url) format
    □ Code blocks specify language
    □ No lines exceed ~78 characters
    □ Uses headers to organize sections

    Build Process:
    □ Ran ./build.sh or node build-projects.js
    □ Script detected the new markdown file
    □ projects.json was regenerated successfully
    □ No errors in the build output

    Testing:
    □ Server runs without errors
    □ Post appears in Projects list
    □ Content renders correctly
    □ Links are clickable
    □ Scrolling works
    □ No console errors

    ================================================================================
    EXAMPLE: COMPLETE WORKFLOW (NEW AUTOMATIC METHOD!)
    ================================================================================

    1. CREATE FILE: /projects/todo-app.md
    ---
    title: TaskFlow Todo App
    date: 2024-10-20
    tags: [web, react, productivity]
    github: https://github.com/user/taskflow
    demo: https://taskflow-demo.vercel.app
    ---

    # TaskFlow Todo App

    ## Overview
    A modern task management app built with React and TypeScript...

    [...rest of content...]


    2. RUN BUILD: (This auto-generates projects.json!)
    ./build.sh

    Output:
    ╔════════════════════════════════════════════════════════════╗
    ║     AUTO-GENERATING PROJECTS.JSON FROM MARKDOWN FILES     ║
    ╚════════════════════════════════════════════════════════════╝

    📁 Found 5 markdown file(s):

    ✓ todo-app.md
    Title: TaskFlow Todo App
    Date:  2024-10-20
    Tags:  web, react, productivity

    ✅ Successfully generated: projects/projects.json
    📊 Total projects: 5


    3. START SERVER: (Or just refresh if already running)
    python3 -m http.server 8000


    4. TEST IN BROWSER:
    http://localhost:8000

    That's it! The projects.json file is automatically created from your markdown files.

    ================================================================================
    TROUBLESHOOTING
    ================================================================================

    Problem: Post doesn't appear in Projects list
    Solution: Run ./build.sh to regenerate projects.json, then refresh browser

    Problem: Build script says "Missing frontmatter"
    Solution: Make sure your .md file has proper YAML frontmatter at the top with
            at least a "title:" field

    Problem: Post shows "Loading..." forever
    Solution: Check that the markdown file exists in /projects/ folder and has
            the correct filename. Run ./build.sh again.

    Problem: Links aren't clickable
    Solution: Ensure links use markdown format [text](url), not HTML <a> tags

    Problem: Code blocks don't have borders
    Solution: Make sure code blocks use triple backticks with language:
            ```javascript
            code here
            ```

    Problem: Formatting looks broken
    Solution: Check for very long lines (>78 chars) and break them up

    Problem: Server won't start (port in use)
    Solution: Kill existing server: lsof -ti:8000 | xargs kill -9

    ================================================================================
    QUICK REFERENCE: COMMANDS & LOCATIONS
    ================================================================================

    Create blog post:         /projects/your-post-name.md (with frontmatter)
    Build command:            ./build.sh  (or: node build-projects.js)
    Generated config:         /projects/projects.json (auto-generated!)
    Start server:             python3 -m http.server 8000
    Website URL:              http://localhost:8000

    **Complete Workflow**:
    1. Create /projects/new-post.md with frontmatter
    2. Run: ./build.sh
    3. Refresh browser (or start server if not running)
    4. Your new post appears automatically!

    ================================================================================
    END OF INSTRUCTIONS
    ================================================================================

    Last Updated: October 2025
    Website Type: TUI Portfolio with Markdown Blog Posts
    Compatible with: Any AI assistant creating blog posts for this system
